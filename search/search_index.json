{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome This website serves as the documentation for the World of Warcraft playerbot lua scripting API playerbot-lua available as part of the MaNGOS Core WoW Server applications. The scripting API exposes Lua bindings to a per-client Lua environment that may be used to control all aspects of Playerbot combat behavior. All information and actions accessible to the scripts are designed to mimic real player information and choices. An example of a simple lua script that prints each playerbot's name once for the client is below: local has_printed = false local function main () if not has_printed then for _ , bot in ipairs ( wow . bots ) do print ( bot . name ) end has_printed = true end end Getting Started To get started with Playerbot scripting, check out getting started for clients . To get started migrating a server that has a [core with playerbot-lua] cores integrated or you are interested in setting up a new server, check out getting started for server admins .","title":"Home"},{"location":"#welcome","text":"This website serves as the documentation for the World of Warcraft playerbot lua scripting API playerbot-lua available as part of the MaNGOS Core WoW Server applications. The scripting API exposes Lua bindings to a per-client Lua environment that may be used to control all aspects of Playerbot combat behavior. All information and actions accessible to the scripts are designed to mimic real player information and choices. An example of a simple lua script that prints each playerbot's name once for the client is below: local has_printed = false local function main () if not has_printed then for _ , bot in ipairs ( wow . bots ) do print ( bot . name ) end has_printed = true end end","title":"Welcome"},{"location":"#getting-started","text":"To get started with Playerbot scripting, check out getting started for clients . To get started migrating a server that has a [core with playerbot-lua] cores integrated or you are interested in setting up a new server, check out getting started for server admins .","title":"Getting Started"},{"location":"cores/","text":"Cores Since playerbot-lua is a 'patch' for existing server applications, it must be integrated into each desired core. The table below describes the status of each core. If a core is not listed and you'd like to see playerbot-lua integrated into it, feel free to make an issue . Core Fork Description Status mangos-classic none CMaNGOS Server for Classic v 1.12.1 inactive mangos-tbc fork CMaNGOS Server for Burning Crusade v 2.4.3 active development mangos-wotlk none CMaNGOS Server for Wrath of the Lich King v 3.3.5 inactive mangos-zero none MaNGOS Server for Classic v 1.12.1 inactive mangos-one none MaNGOS Server for Burning Crusade v 2.4.3 inactive mangos-two none MaNGOS Server for Wrath of the Lich King v 3.3.5 inactive mangos-three none MaNGOS Server for Cataclysm v 4.3.4 inactive playerbot-lua development continues on the mangos-tbc . Once it reaches a stable state a higher priority will be placed on integrating the API in other cores.","title":"Cores"},{"location":"cores/#cores","text":"Since playerbot-lua is a 'patch' for existing server applications, it must be integrated into each desired core. The table below describes the status of each core. If a core is not listed and you'd like to see playerbot-lua integrated into it, feel free to make an issue . Core Fork Description Status mangos-classic none CMaNGOS Server for Classic v 1.12.1 inactive mangos-tbc fork CMaNGOS Server for Burning Crusade v 2.4.3 active development mangos-wotlk none CMaNGOS Server for Wrath of the Lich King v 3.3.5 inactive mangos-zero none MaNGOS Server for Classic v 1.12.1 inactive mangos-one none MaNGOS Server for Burning Crusade v 2.4.3 inactive mangos-two none MaNGOS Server for Wrath of the Lich King v 3.3.5 inactive mangos-three none MaNGOS Server for Cataclysm v 4.3.4 inactive playerbot-lua development continues on the mangos-tbc . Once it reaches a stable state a higher priority will be placed on integrating the API in other cores.","title":"Cores"},{"location":"getting_started_client/","text":"Getting Started To setup your playerbot-lua development environment, follow the installation instructions below. Installation instructions (Windows): The following instructions will guide you through installing the playerbot CLI to a global location (optional) and initializing a script source directory. In a global location, such as C:\\Program Files\\ , create a folder called Playerbot CLI . Download the file playerbot.zip from the latest release . Right click on the downloaded file and choose Extract All from the context menu. In the destination text box, enter the folder path created in step 1 e.g. C:\\Program Files\\Playerbot CLI\\ and press Extract . Open the windows start menu, and begin typing environment variables . Choose the first result Edit the system environment variables . A System Properties window will appear. Click the Environment Variables... button at the bottom right. A Environment Variables windows will appear. In the first table in the new window titled User variables for <user> , locate and double click on the row with the variable name Path . A new window titled Editor Environment Variable will appear. Press the New button at the top right of the window. A new row in the table will appear. In the new row text box, enter the folder location of playerbot.exe e.g. C:\\Program Files\\Playerbot CLI\\ . Click Ok at the bottom of the Editor Environment Variable window, the Environment Variables window, and the System Properties window. Open a new terminal such as Powershell or Command Prompt or open VS Code and run a terminal (CTRL+SHIFT+`) at the location where the lua script files will be located (if a terminal is already open, close and re-open it or restart VS Code). Run the command playerbot . The directory will be initialized with a configuration file. In the WoW client, run the command .bot ai get token . Enter the provided token into the configuration file's TOKEN field value. Modify the configuration file to update the API_HOST and LOG_HOST addresses to point to the correct location. If desired, change the relative path where lua script files should be stored (default is src/ ). Run the command playerbot again. It will attempt to authorize the token. If successful, the provided directory will initialize. Run the command playerbot -deploy . The hello world provided script will deploy. Add a bot as normal using the command bot add <name> . In-game, run the command .bot ai use lua to switch to lua scripting mode. A system message will appear as instructed in main.lua which will read AI scripting is alive :) . Outside the game, edit the main.lua script file to change the printed string to something else, e.g. AI scripting is alive! . In-game, run the command .bot ai load . The changed string will appear printed as written. For more information on what the CLI can do, run the command playerbot --help or check the documentation . Workflow Login to the WoW server and choose your master character. In the in-game chat, run the command .bot ai use lua . Run the command .bot ai get token and update config.yml in your script source directory with the updated token if necessary. Begin scripting using the API . Once you'd like to your run your scripts, run playerbot -deploy . In-game, run the command .bot ai load . Repeat steps 4 through 6 as you develop your scripts. If you get errors on deployment indicating that your token has expired, repeat step 3. Bug reports, suggestions, or any other questions should be created as issues here .","title":"Getting Started"},{"location":"getting_started_client/#getting-started","text":"To setup your playerbot-lua development environment, follow the installation instructions below.","title":"Getting Started"},{"location":"getting_started_client/#installation-instructions-windows","text":"The following instructions will guide you through installing the playerbot CLI to a global location (optional) and initializing a script source directory. In a global location, such as C:\\Program Files\\ , create a folder called Playerbot CLI . Download the file playerbot.zip from the latest release . Right click on the downloaded file and choose Extract All from the context menu. In the destination text box, enter the folder path created in step 1 e.g. C:\\Program Files\\Playerbot CLI\\ and press Extract . Open the windows start menu, and begin typing environment variables . Choose the first result Edit the system environment variables . A System Properties window will appear. Click the Environment Variables... button at the bottom right. A Environment Variables windows will appear. In the first table in the new window titled User variables for <user> , locate and double click on the row with the variable name Path . A new window titled Editor Environment Variable will appear. Press the New button at the top right of the window. A new row in the table will appear. In the new row text box, enter the folder location of playerbot.exe e.g. C:\\Program Files\\Playerbot CLI\\ . Click Ok at the bottom of the Editor Environment Variable window, the Environment Variables window, and the System Properties window. Open a new terminal such as Powershell or Command Prompt or open VS Code and run a terminal (CTRL+SHIFT+`) at the location where the lua script files will be located (if a terminal is already open, close and re-open it or restart VS Code). Run the command playerbot . The directory will be initialized with a configuration file. In the WoW client, run the command .bot ai get token . Enter the provided token into the configuration file's TOKEN field value. Modify the configuration file to update the API_HOST and LOG_HOST addresses to point to the correct location. If desired, change the relative path where lua script files should be stored (default is src/ ). Run the command playerbot again. It will attempt to authorize the token. If successful, the provided directory will initialize. Run the command playerbot -deploy . The hello world provided script will deploy. Add a bot as normal using the command bot add <name> . In-game, run the command .bot ai use lua to switch to lua scripting mode. A system message will appear as instructed in main.lua which will read AI scripting is alive :) . Outside the game, edit the main.lua script file to change the printed string to something else, e.g. AI scripting is alive! . In-game, run the command .bot ai load . The changed string will appear printed as written. For more information on what the CLI can do, run the command playerbot --help or check the documentation .","title":"Installation instructions (Windows):"},{"location":"getting_started_client/#workflow","text":"Login to the WoW server and choose your master character. In the in-game chat, run the command .bot ai use lua . Run the command .bot ai get token and update config.yml in your script source directory with the updated token if necessary. Begin scripting using the API . Once you'd like to your run your scripts, run playerbot -deploy . In-game, run the command .bot ai load . Repeat steps 4 through 6 as you develop your scripts. If you get errors on deployment indicating that your token has expired, repeat step 3. Bug reports, suggestions, or any other questions should be created as issues here .","title":"Workflow"},{"location":"getting_started_server/","text":"Server Make sure the server is running the current latest commit on the master branch for your core of choice. Build, install, initialize, and run the server as normal. Ensure that the appropriate migration scripts have been applied to the server database. Docker is recommended to build and run a small API web application which the client CLI interacts with to manage scripts. A docker-compose file is available in the source which may be used as a convenient way to spin up the provided lua script development API web application as well as the mysql database used by the server (it is generally considered good practice to containerize mysql, especially if using an older version). If Docker is not available or desired, the web application may be built and run natively. There are guides available online to build an ASP.NET Core web app for Windows or Linux. Run the sql setup script located in the source under sql/base/mangos_lua.sql e.g. sudo mysql -uroot --database=tbccharacters < sql/base/mangos_lua.sql where the database is the characters database for your core. Bug reports, suggestions, or any other questions should be created as issues here .","title":"Getting started server"},{"location":"getting_started_server/#server","text":"Make sure the server is running the current latest commit on the master branch for your core of choice. Build, install, initialize, and run the server as normal. Ensure that the appropriate migration scripts have been applied to the server database. Docker is recommended to build and run a small API web application which the client CLI interacts with to manage scripts. A docker-compose file is available in the source which may be used as a convenient way to spin up the provided lua script development API web application as well as the mysql database used by the server (it is generally considered good practice to containerize mysql, especially if using an older version). If Docker is not available or desired, the web application may be built and run natively. There are guides available online to build an ASP.NET Core web app for Windows or Linux. Run the sql setup script located in the source under sql/base/mangos_lua.sql e.g. sudo mysql -uroot --database=tbccharacters < sql/base/mangos_lua.sql where the database is the characters database for your core. Bug reports, suggestions, or any other questions should be created as issues here .","title":"Server"},{"location":"api/","text":"API Reference Getting started Check out the getting started page to learn how to setup a script development environment. Most interactions with the game state take place through the global access variable wow . For more information, check out the globals documentation. Lua script requirements Each script AI should create an entrypoint script that defines a function main . The main function will be called every 50ms or so depending on server performance (referred to as a 'tick'). The function should read in game state data and perform actions as appropriate. The main function should return when processing is complete. Even though most actions block (i.e. directly execute), it is possible to perform multiple actions per bot depending on the action (i.e. actions that don't affect GCD, like taking a pot or printing information). The following code snippet demonstrates having each bot activate both their trinkets in the same tick: local has_used_trinkets = false local function main () if not has_used_trinkets then for bot in each ( wow . bots ) do bot . trinket_1 : use () bot . trinket_2 : use () end has_used_trinkets = true end end It should be noted that the results of actions are not guaranteed to be immediately present in the game state data after an action is performed. Libraries The lua scripting API supports libraries provides a set of 1st-party libraries that ship with lua. They are: Library Description base Provides various basic functions like ipairs package Provides support for packages via require (and custom modules) coroutine Provides support for coroutines, roughly 'parallel execution' string Provides various features for working with strings math Provides various functions for performing math via math table Provides various tools to maniplate tables like table.insert Json A json library comes with the server and can be brought in by using json = require(\"json\") . The json library used is here . These are the functions available on the json module: json . encode ({ 1 , 2 , 3 , { x = 10 } }) -- Returns '[1,2,3,{\"x\":10}]' json . decode ( '[1,2,3,{\"x\":10}]' ) -- Returns { 1, 2, 3, { x = 10 } } Function Description Parameters Return Type Tested? encode Returns a string representing value encoded in JSON object data string Yes decode Returns a value representing the decoded JSON string string value object Yes Custom Modules playerbot-lua supports custom modules that work in the same way they would with normal lua files using their relative path to the source root. Modules are importable through the same usage of require . Given the following files: modules/test.lua test = {} function test . print_bot_name ( bot ) print ( bot . name ) end return test main.lua test = require ( \"modules/test\" ) function main () for _ , bot in ipairs ( wow . bots ) do test . print_bot_name ( bot ) end end The module import would work as expected and a list of bot names would be printed. Pointers While memory objects are retained between ticks when created and managed in lua, all pointers to objects that are not managed by lua (e.g. a Player managed by the server) should not be trusted to persist at the same memory location between ticks. As such, it is recommended to only store value type objects provided by the API between ticks. For example, the following code may be written to store bot CC assignments: local cc_assignments = {} local function main () for bot in each ( wow . bots ) do -- notice the usage of a pointer as the key if bot . class == wow . enums . classes . mage and not cc_assignments [ bot ] then cc_assignments [ bot ] = wow . raid_icons . moon end end end This strategy for storing CC assignments may seem appealing at first as it provides an easy way to uniquely identify and track assignments. For example, when individual mage behavior is being decided, the following code could be written: -- in a mage decision function local cc_target = cc_assignments [ bot ] if cc_target then bot : cast ( cc_target , POLYMORPH_SPELL_ID ) end The issue arises in the next tick as the previous assignment would still be present with the previous pointer identifying the bot. When cc_assignments is indexed to see if the bot has an assignment, the bot pointer available will notmatch the original pointer by value. As such the mage Playerbot will not correctly cast the correct spell. A better strategy might be to use the name of the bot as the key. Since it is a string and therefore a value type, it will represent the bot well between ticks. For example: -- set cc_assignments [ bot . name ] = wow . raid_icons . moon -- get local cc_target = cc_assignments [ bot . name ] The bot object's id member would suffice as well. Note- pointers provided from the API can be trusted to be consistent during the same tick. In the above example, if cc_assignments was repopulated at the beginning of each tick with the latest pointer, later iterations over the wow.bots array would provide the same pointers and equality would work as expected. Garbage Collection The lua instance automatically garbage collects using internal best practices to retain high performance. Since the server understands that lua will be repeatedly executed, in each tick, after lua code execution, the server manually invokes garbage collection. Issues Bug reports, suggestions, or any other questions should be created as issues here .","title":"API Reference"},{"location":"api/#api-reference","text":"","title":"API Reference"},{"location":"api/#getting-started","text":"Check out the getting started page to learn how to setup a script development environment. Most interactions with the game state take place through the global access variable wow . For more information, check out the globals documentation.","title":"Getting started"},{"location":"api/#lua-script-requirements","text":"Each script AI should create an entrypoint script that defines a function main . The main function will be called every 50ms or so depending on server performance (referred to as a 'tick'). The function should read in game state data and perform actions as appropriate. The main function should return when processing is complete. Even though most actions block (i.e. directly execute), it is possible to perform multiple actions per bot depending on the action (i.e. actions that don't affect GCD, like taking a pot or printing information). The following code snippet demonstrates having each bot activate both their trinkets in the same tick: local has_used_trinkets = false local function main () if not has_used_trinkets then for bot in each ( wow . bots ) do bot . trinket_1 : use () bot . trinket_2 : use () end has_used_trinkets = true end end It should be noted that the results of actions are not guaranteed to be immediately present in the game state data after an action is performed.","title":"Lua script requirements"},{"location":"api/#libraries","text":"The lua scripting API supports libraries provides a set of 1st-party libraries that ship with lua. They are: Library Description base Provides various basic functions like ipairs package Provides support for packages via require (and custom modules) coroutine Provides support for coroutines, roughly 'parallel execution' string Provides various features for working with strings math Provides various functions for performing math via math table Provides various tools to maniplate tables like table.insert","title":"Libraries"},{"location":"api/#json","text":"A json library comes with the server and can be brought in by using json = require(\"json\") . The json library used is here . These are the functions available on the json module: json . encode ({ 1 , 2 , 3 , { x = 10 } }) -- Returns '[1,2,3,{\"x\":10}]' json . decode ( '[1,2,3,{\"x\":10}]' ) -- Returns { 1, 2, 3, { x = 10 } } Function Description Parameters Return Type Tested? encode Returns a string representing value encoded in JSON object data string Yes decode Returns a value representing the decoded JSON string string value object Yes","title":"Json"},{"location":"api/#custom-modules","text":"playerbot-lua supports custom modules that work in the same way they would with normal lua files using their relative path to the source root. Modules are importable through the same usage of require . Given the following files: modules/test.lua test = {} function test . print_bot_name ( bot ) print ( bot . name ) end return test main.lua test = require ( \"modules/test\" ) function main () for _ , bot in ipairs ( wow . bots ) do test . print_bot_name ( bot ) end end The module import would work as expected and a list of bot names would be printed.","title":"Custom Modules"},{"location":"api/#pointers","text":"While memory objects are retained between ticks when created and managed in lua, all pointers to objects that are not managed by lua (e.g. a Player managed by the server) should not be trusted to persist at the same memory location between ticks. As such, it is recommended to only store value type objects provided by the API between ticks. For example, the following code may be written to store bot CC assignments: local cc_assignments = {} local function main () for bot in each ( wow . bots ) do -- notice the usage of a pointer as the key if bot . class == wow . enums . classes . mage and not cc_assignments [ bot ] then cc_assignments [ bot ] = wow . raid_icons . moon end end end This strategy for storing CC assignments may seem appealing at first as it provides an easy way to uniquely identify and track assignments. For example, when individual mage behavior is being decided, the following code could be written: -- in a mage decision function local cc_target = cc_assignments [ bot ] if cc_target then bot : cast ( cc_target , POLYMORPH_SPELL_ID ) end The issue arises in the next tick as the previous assignment would still be present with the previous pointer identifying the bot. When cc_assignments is indexed to see if the bot has an assignment, the bot pointer available will notmatch the original pointer by value. As such the mage Playerbot will not correctly cast the correct spell. A better strategy might be to use the name of the bot as the key. Since it is a string and therefore a value type, it will represent the bot well between ticks. For example: -- set cc_assignments [ bot . name ] = wow . raid_icons . moon -- get local cc_target = cc_assignments [ bot . name ] The bot object's id member would suffice as well. Note- pointers provided from the API can be trusted to be consistent during the same tick. In the above example, if cc_assignments was repopulated at the beginning of each tick with the latest pointer, later iterations over the wow.bots array would provide the same pointers and equality would work as expected.","title":"Pointers"},{"location":"api/#garbage-collection","text":"The lua instance automatically garbage collects using internal best practices to retain high performance. Since the server understands that lua will be repeatedly executed, in each tick, after lua code execution, the server manually invokes garbage collection.","title":"Garbage Collection"},{"location":"api/#issues","text":"Bug reports, suggestions, or any other questions should be created as issues here .","title":"Issues"},{"location":"api/enums/","text":"Enums Introduction In lua, enums are tables that represent a map between a number and a string. All enum tables are accessible through wow.enums . They are most often used to provide a clean way to represent different possible states which often take the form of a single element of a possible set. For example, when working with player classes via the player.class member (see the Player type) the return value is a number which uniquely identifies the class from the set of possible classes. While the numeric value serves well as a clean and straightforward way to represent each class, often times the name of that class is needed. The code snippet below demonstrates the value of having a map available. print ( some_player . class ) -- 1: not particularly readable print ( wow . enums . classes [ some_player . class ]) -- mage All enum tables are also 'flipped' or reversed, so each value is also the key to the corresponding value; wow.enums.classes[1] returns mage , and wow.enums.classes[\"mage\"] returns 1 . The 'reversed' mapping useful in the case where one might want to confirm whether or not a given player is a mage: if some_player . class == wow . enums . classes [ \"mage\" ] then print ( \"It's a mage!\" ) end This removes the need for memorization of class numbers and makes the code more readable. Furthermore, the use of a string as a key can be replaced with dot notation as below since the presence of the key is guaranteed: if some_player . class == wow . enums . classes . mage then print ( \"It's a mage!\" ) end See the sidebar on the left for the list of all enums.","title":"Enums"},{"location":"api/enums/#enums","text":"","title":"Enums"},{"location":"api/enums/#introduction","text":"In lua, enums are tables that represent a map between a number and a string. All enum tables are accessible through wow.enums . They are most often used to provide a clean way to represent different possible states which often take the form of a single element of a possible set. For example, when working with player classes via the player.class member (see the Player type) the return value is a number which uniquely identifies the class from the set of possible classes. While the numeric value serves well as a clean and straightforward way to represent each class, often times the name of that class is needed. The code snippet below demonstrates the value of having a map available. print ( some_player . class ) -- 1: not particularly readable print ( wow . enums . classes [ some_player . class ]) -- mage All enum tables are also 'flipped' or reversed, so each value is also the key to the corresponding value; wow.enums.classes[1] returns mage , and wow.enums.classes[\"mage\"] returns 1 . The 'reversed' mapping useful in the case where one might want to confirm whether or not a given player is a mage: if some_player . class == wow . enums . classes [ \"mage\" ] then print ( \"It's a mage!\" ) end This removes the need for memorization of class numbers and makes the code more readable. Furthermore, the use of a string as a key can be replaced with dot notation as below since the presence of the key is guaranteed: if some_player . class == wow . enums . classes . mage then print ( \"It's a mage!\" ) end See the sidebar on the left for the list of all enums.","title":"Introduction"},{"location":"api/enums/classes/","text":"Classes The classes enum allows for mapping from a class id to its corresponding name. The key is a number id and the value is a string name . It is accessed through wow.enums.classes . It is recommended to use classes alongside the class member of the Player type. For example: print ( wow . enums . classes .3 ) -- mage print ( wow . enums . classes . mage ) -- 3 print ( wow . enums . classes [ bot . class ] ) -- Mage Key Value 3 mage 4 warrior 5 warlock 6 priest 7 druid 8 rogue 9 hunter 10 paladin 11 shaman","title":"Classes"},{"location":"api/enums/classes/#classes","text":"The classes enum allows for mapping from a class id to its corresponding name. The key is a number id and the value is a string name . It is accessed through wow.enums.classes . It is recommended to use classes alongside the class member of the Player type. For example: print ( wow . enums . classes .3 ) -- mage print ( wow . enums . classes . mage ) -- 3 print ( wow . enums . classes [ bot . class ] ) -- Mage Key Value 3 mage 4 warrior 5 warlock 6 priest 7 druid 8 rogue 9 hunter 10 paladin 11 shaman","title":"Classes"},{"location":"api/enums/creature_types/","text":"Creature Types The creature_types enum allows for mapping from a creature type name to its corresponding id. The key is a string name and the value is a number id . It is accessed through wow.enums.creature_types . It is recommended to use creature_types alongside the type member of the Unit type. For example: print ( wow . enums . classes .1 ) -- beast print ( wow . enums . classes . dragonkin ) -- 1 print ( wow . enums . classes [ target . type ] ) -- beast Key Value beast 1 dragonkin 2 demon 3 elemental 4 giant 5 undead 6 humanoid 7 critter 8 mechanical 9 unknown 10 totem 11 non_combat_pet 12 gas_cloud 13","title":"Creature Types"},{"location":"api/enums/creature_types/#creature-types","text":"The creature_types enum allows for mapping from a creature type name to its corresponding id. The key is a string name and the value is a number id . It is accessed through wow.enums.creature_types . It is recommended to use creature_types alongside the type member of the Unit type. For example: print ( wow . enums . classes .1 ) -- beast print ( wow . enums . classes . dragonkin ) -- 1 print ( wow . enums . classes [ target . type ] ) -- beast Key Value beast 1 dragonkin 2 demon 3 elemental 4 giant 5 undead 6 humanoid 7 critter 8 mechanical 9 unknown 10 totem 11 non_combat_pet 12 gas_cloud 13","title":"Creature Types"},{"location":"api/enums/dispel_types/","text":"Dispel Types The dispel_types enum allows for mapping from a dispel type name to its corresponding id. The key is a string name and the value is a number id . It is accessed through wow.enums.dispel_types . It is recommended to use dispel_types alongside the type member of the Aura type. For example: print ( wow . enums . dispel_types .1 ) -- magic print ( wow . enums . dispel_types . magic ) -- 1 print ( wow . enums . dispel_types [ aura . type ] ) -- magic Key Value none 0 magic 1 curse 2 disease 3 poison 4 stealth 5 invisibility 6 all 7 enrage 9","title":"Dispel Types"},{"location":"api/enums/dispel_types/#dispel-types","text":"The dispel_types enum allows for mapping from a dispel type name to its corresponding id. The key is a string name and the value is a number id . It is accessed through wow.enums.dispel_types . It is recommended to use dispel_types alongside the type member of the Aura type. For example: print ( wow . enums . dispel_types .1 ) -- magic print ( wow . enums . dispel_types . magic ) -- 1 print ( wow . enums . dispel_types [ aura . type ] ) -- magic Key Value none 0 magic 1 curse 2 disease 3 poison 4 stealth 5 invisibility 6 all 7 enrage 9","title":"Dispel Types"},{"location":"api/enums/equip_slot/","text":"Equip Slot The equip_slots enum allows for mapping from a equip slot id to its corresponding name. The key is a string name and the value is a number id . It is accessed through wow.enums.equip_slots . It is recommended to use equip_slots alongside the type member of the Aura type. For example: print ( wow . enums . equip_slots .1 ) -- magic print ( wow . enums . equip_slots . magic ) -- 1 print ( wow . enums . equip_slots [ aura . type ] ) -- magic Key Value head 0 neck 1 shoulders 2 chest 3 waist 5 legs 6 feet 7 wrists 8 hands 9 finger_1 10 finger_2 11 trinket_1 12 trinket_2 13 back 14 main_hand 15 off_hand 16 ranged 17","title":"Equip Slot"},{"location":"api/enums/equip_slot/#equip-slot","text":"The equip_slots enum allows for mapping from a equip slot id to its corresponding name. The key is a string name and the value is a number id . It is accessed through wow.enums.equip_slots . It is recommended to use equip_slots alongside the type member of the Aura type. For example: print ( wow . enums . equip_slots .1 ) -- magic print ( wow . enums . equip_slots . magic ) -- 1 print ( wow . enums . equip_slots [ aura . type ] ) -- magic Key Value head 0 neck 1 shoulders 2 chest 3 waist 5 legs 6 feet 7 wrists 8 hands 9 finger_1 10 finger_2 11 trinket_1 12 trinket_2 13 back 14 main_hand 15 off_hand 16 ranged 17","title":"Equip Slot"},{"location":"api/enums/raid_icons/","text":"Raid Icons The raid_icons enum allows for mapping from a raid icon name to its corresponding id. The key is a string name and the value is a number id . It is accessed through wow.enums.raid_icons . It is recommended to use raid_icons alongside the raid_icon member of the Unit type. For example: print ( wow . enums . raid_icon .1 ) -- circle print ( wow . enums . raid_icon . circle ) -- 1 print ( wow . enums . raid_icon [ unit . raid_icon ] ) -- magic Key Value star 0 circle 1 diamond 2 triangle 3 moon 4 square 5 cross 6 skull 7","title":"Raid Icons"},{"location":"api/enums/raid_icons/#raid-icons","text":"The raid_icons enum allows for mapping from a raid icon name to its corresponding id. The key is a string name and the value is a number id . It is accessed through wow.enums.raid_icons . It is recommended to use raid_icons alongside the raid_icon member of the Unit type. For example: print ( wow . enums . raid_icon .1 ) -- circle print ( wow . enums . raid_icon . circle ) -- 1 print ( wow . enums . raid_icon [ unit . raid_icon ] ) -- magic Key Value star 0 circle 1 diamond 2 triangle 3 moon 4 square 5 cross 6 skull 7","title":"Raid Icons"},{"location":"api/enums/specs/","text":"Specs The specs enum allows for mapping from a equip slot id to its corresponding name. The key is a number id and the value is a string name . It is accessed through wow.enums.specs . For example: It is recommended to use specs alongside the spec member of the Player type. For example: print ( wow . enums . specs . mage .81 ) -- arcane print ( wow . enums . specs . arcane ) -- 81 print ( wow . enums . specs [ bot . spec ] ) -- arcane Mage Key Value 81 arcane 41 fire 61 frost Warrior Key Value 161 arms 164 fury 163 protection Rogue Key Value 182 assassination 181 combat 183 subtlety Priest Key Value 201 discipline 202 holy 203 shadow Shaman Key Value 261 elemental 263 enhancement 262 restoration Druid Key Value 283 balance 281 feral 282 restoration Warlock Key Value 302 affliction 303 demonology 301 destruction Hunter Key Value 361 beast_mastery 363 marksmanship 362 survival Paladin Key Value 382 holy 383 protection 381 retribution","title":"Specializations"},{"location":"api/enums/specs/#specs","text":"The specs enum allows for mapping from a equip slot id to its corresponding name. The key is a number id and the value is a string name . It is accessed through wow.enums.specs . For example: It is recommended to use specs alongside the spec member of the Player type. For example: print ( wow . enums . specs . mage .81 ) -- arcane print ( wow . enums . specs . arcane ) -- 81 print ( wow . enums . specs [ bot . spec ] ) -- arcane","title":"Specs"},{"location":"api/enums/specs/#mage","text":"Key Value 81 arcane 41 fire 61 frost","title":"Mage"},{"location":"api/enums/specs/#warrior","text":"Key Value 161 arms 164 fury 163 protection","title":"Warrior"},{"location":"api/enums/specs/#rogue","text":"Key Value 182 assassination 181 combat 183 subtlety","title":"Rogue"},{"location":"api/enums/specs/#priest","text":"Key Value 201 discipline 202 holy 203 shadow","title":"Priest"},{"location":"api/enums/specs/#shaman","text":"Key Value 261 elemental 263 enhancement 262 restoration","title":"Shaman"},{"location":"api/enums/specs/#druid","text":"Key Value 283 balance 281 feral 282 restoration","title":"Druid"},{"location":"api/enums/specs/#warlock","text":"Key Value 302 affliction 303 demonology 301 destruction","title":"Warlock"},{"location":"api/enums/specs/#hunter","text":"Key Value 361 beast_mastery 363 marksmanship 362 survival","title":"Hunter"},{"location":"api/enums/specs/#paladin","text":"Key Value 382 holy 383 protection 381 retribution","title":"Paladin"},{"location":"api/enums/spell_results/","text":"Spell Result The spell_results enum allows for mapping from a spell result id to its corresponding name. The key is a number id and the value is a string name . It is accessed through wow.enums.spell_results . Due to the significant length of results simplified names have not been provided; the value is a 1-to-1 to the server enum. It is recommended to use spell_results to interpret the result of the cast and force_cast functions of the Player type. For example: print ( wow . enums . classes .122 ) -- SPELL_FAILED_TOO_CLOSE print ( wow . enums . classes . SPELL_FAILED_TOO_CLOSE ) -- 122 local result = bot : cast ( SOME_SPELL_ID ) print ( wow . enums . classes [ result ]) -- SPELL_FAILED_TOO_CLOSE Key Value 0 SPELL_FAILED_AFFECTING_COMBAT 1 SPELL_FAILED_ALREADY_AT_FULL_HEALTH 2 SPELL_FAILED_ALREADY_AT_FULL_MANA 3 SPELL_FAILED_ALREADY_AT_FULL_POWER 4 SPELL_FAILED_ALREADY_BEING_TAMED 5 SPELL_FAILED_ALREADY_HAVE_CHARM 6 SPELL_FAILED_ALREADY_HAVE_SUMMON 7 SPELL_FAILED_ALREADY_OPEN 8 SPELL_FAILED_AURA_BOUNCED 9 SPELL_FAILED_AUTOTRACK_INTERRUPTED 10 SPELL_FAILED_BAD_IMPLICIT_TARGETS 11 SPELL_FAILED_BAD_TARGETS 12 SPELL_FAILED_CANT_BE_CHARMED 13 SPELL_FAILED_CANT_BE_DISENCHANTED 14 SPELL_FAILED_CANT_BE_DISENCHANTED_SKILL 15 SPELL_FAILED_CANT_BE_PROSPECTED 16 SPELL_FAILED_CANT_CAST_ON_TAPPED 17 SPELL_FAILED_CANT_DUEL_WHILE_INVISIBLE 18 SPELL_FAILED_CANT_DUEL_WHILE_STEALTHED 19 SPELL_FAILED_CANT_STEALTH 20 SPELL_FAILED_CASTER_AURASTATE 21 SPELL_FAILED_CASTER_DEAD 22 SPELL_FAILED_CHARMED 23 SPELL_FAILED_CHEST_IN_USE 24 SPELL_FAILED_CONFUSED 25 SPELL_FAILED_DONT_REPORT 26 SPELL_FAILED_EQUIPPED_ITEM 27 SPELL_FAILED_EQUIPPED_ITEM_CLASS 28 SPELL_FAILED_EQUIPPED_ITEM_CLASS_MAINHAND 29 SPELL_FAILED_EQUIPPED_ITEM_CLASS_OFFHAND 30 SPELL_FAILED_ERROR 31 SPELL_FAILED_FIZZLE 32 SPELL_FAILED_FLEEING 33 SPELL_FAILED_FOOD_LOWLEVEL 34 SPELL_FAILED_HIGHLEVEL 35 SPELL_FAILED_HUNGER_SATIATED 36 SPELL_FAILED_IMMUNE 37 SPELL_FAILED_INTERRUPTED 38 SPELL_FAILED_INTERRUPTED_COMBAT 39 SPELL_FAILED_ITEM_ALREADY_ENCHANTED 40 SPELL_FAILED_ITEM_GONE 41 SPELL_FAILED_ITEM_NOT_FOUND 42 SPELL_FAILED_ITEM_NOT_READY 43 SPELL_FAILED_LEVEL_REQUIREMENT 44 SPELL_FAILED_LINE_OF_SIGHT 45 SPELL_FAILED_LOWLEVEL 46 SPELL_FAILED_LOW_CASTLEVEL 47 SPELL_FAILED_MAINHAND_EMPTY 48 SPELL_FAILED_MOVING 49 SPELL_FAILED_NEED_AMMO 50 SPELL_FAILED_NEED_AMMO_POUCH 51 SPELL_FAILED_NEED_EXOTIC_AMMO 52 SPELL_FAILED_NOPATH 53 SPELL_FAILED_NOT_BEHIND 54 SPELL_FAILED_NOT_FISHABLE 55 SPELL_FAILED_NOT_FLYING 56 SPELL_FAILED_NOT_HERE 57 SPELL_FAILED_NOT_INFRONT 58 SPELL_FAILED_NOT_IN_CONTROL 59 SPELL_FAILED_NOT_KNOWN 60 SPELL_FAILED_NOT_MOUNTED 61 SPELL_FAILED_NOT_ON_TAXI 62 SPELL_FAILED_NOT_ON_TRANSPORT 63 SPELL_FAILED_NOT_READY 64 SPELL_FAILED_NOT_SHAPESHIFT 65 SPELL_FAILED_NOT_STANDING 66 SPELL_FAILED_NOT_TRADEABLE 67 SPELL_FAILED_NOT_TRADING 68 SPELL_FAILED_NOT_UNSHEATHED 69 SPELL_FAILED_NOT_WHILE_GHOST 70 SPELL_FAILED_NO_AMMO 71 SPELL_FAILED_NO_CHARGES_REMAIN 72 SPELL_FAILED_NO_CHAMPION 73 SPELL_FAILED_NO_COMBO_POINTS 74 SPELL_FAILED_NO_DUELING 75 SPELL_FAILED_NO_ENDURANCE 76 SPELL_FAILED_NO_FISH 77 SPELL_FAILED_NO_ITEMS_WHILE_SHAPESHIFTED 78 SPELL_FAILED_NO_MOUNTS_ALLOWED 79 SPELL_FAILED_NO_PET 80 SPELL_FAILED_NO_POWER 81 SPELL_FAILED_NOTHING_TO_DISPEL 82 SPELL_FAILED_NOTHING_TO_STEAL 83 SPELL_FAILED_ONLY_ABOVEWATER 84 SPELL_FAILED_ONLY_DAYTIME 85 SPELL_FAILED_ONLY_INDOORS 86 SPELL_FAILED_ONLY_MOUNTED 87 SPELL_FAILED_ONLY_NIGHTTIME 88 SPELL_FAILED_ONLY_OUTDOORS 89 SPELL_FAILED_ONLY_SHAPESHIFT 90 SPELL_FAILED_ONLY_STEALTHED 91 SPELL_FAILED_ONLY_UNDERWATER 92 SPELL_FAILED_OUT_OF_RANGE 93 SPELL_FAILED_PACIFIED 94 SPELL_FAILED_POSSESSED 95 SPELL_FAILED_REAGENTS 96 SPELL_FAILED_REQUIRES_AREA 97 SPELL_FAILED_REQUIRES_SPELL_FOCUS 98 SPELL_FAILED_ROOTED 99 SPELL_FAILED_SILENCED 100 SPELL_FAILED_SPELL_IN_PROGRESS 101 SPELL_FAILED_SPELL_LEARNED 102 SPELL_FAILED_SPELL_UNAVAILABLE 103 SPELL_FAILED_STUNNED 104 SPELL_FAILED_TARGETS_DEAD 105 SPELL_FAILED_TARGET_AFFECTING_COMBAT 106 SPELL_FAILED_TARGET_AURASTATE 107 SPELL_FAILED_TARGET_DUELING 108 SPELL_FAILED_TARGET_ENEMY 109 SPELL_FAILED_TARGET_ENRAGED 110 SPELL_FAILED_TARGET_FRIENDLY 111 SPELL_FAILED_TARGET_IN_COMBAT 112 SPELL_FAILED_TARGET_IS_PLAYER 113 SPELL_FAILED_TARGET_IS_PLAYER_CONTROLLED 114 SPELL_FAILED_TARGET_NOT_DEAD 115 SPELL_FAILED_TARGET_NOT_IN_PARTY 116 SPELL_FAILED_TARGET_NOT_LOOTED 117 SPELL_FAILED_TARGET_NOT_PLAYER 118 SPELL_FAILED_TARGET_NO_POCKETS 119 SPELL_FAILED_TARGET_NO_WEAPONS 120 SPELL_FAILED_TARGET_UNSKINNABLE 121 SPELL_FAILED_THIRST_SATIATED 122 SPELL_FAILED_TOO_CLOSE 123 SPELL_FAILED_TOO_MANY_OF_ITEM 124 SPELL_FAILED_TOTEM_CATEGORY 125 SPELL_FAILED_TOTEMS 126 SPELL_FAILED_TRAINING_POINTS 127 SPELL_FAILED_TRY_AGAIN 128 SPELL_FAILED_UNIT_NOT_BEHIND 129 SPELL_FAILED_UNIT_NOT_INFRONT 130 SPELL_FAILED_WRONG_PET_FOOD 131 SPELL_FAILED_NOT_WHILE_FATIGUED 132 SPELL_FAILED_TARGET_NOT_IN_INSTANCE 133 SPELL_FAILED_NOT_WHILE_TRADING 134 SPELL_FAILED_TARGET_NOT_IN_RAID 135 SPELL_FAILED_DISENCHANT_WHILE_LOOTING 136 SPELL_FAILED_PROSPECT_WHILE_LOOTING 137 SPELL_FAILED_PROSPECT_NEED_MORE 138 SPELL_FAILED_TARGET_FREEFORALL 139 SPELL_FAILED_NO_EDIBLE_CORPSES 140 SPELL_FAILED_ONLY_BATTLEGROUNDS 141 SPELL_FAILED_TARGET_NOT_GHOST 142 SPELL_FAILED_TOO_MANY_SKILLS 143 SPELL_FAILED_TRANSFORM_UNUSABLE 144 SPELL_FAILED_WRONG_WEATHER 145 SPELL_FAILED_DAMAGE_IMMUNE 146 SPELL_FAILED_PREVENTED_BY_MECHANIC 147 SPELL_FAILED_PLAY_TIME 148 SPELL_FAILED_REPUTATION 149 SPELL_FAILED_MIN_SKILL 150 SPELL_FAILED_NOT_IN_ARENA 151 SPELL_FAILED_NOT_ON_SHAPESHIFT 152 SPELL_FAILED_NOT_ON_STEALTHED 153 SPELL_FAILED_NOT_ON_DAMAGE_IMMUNE 154 SPELL_FAILED_NOT_ON_MOUNTED 155 SPELL_FAILED_TOO_SHALLOW 156 SPELL_FAILED_TARGET_NOT_IN_SANCTUARY 157 SPELL_FAILED_TARGET_IS_TRIVIAL 158 SPELL_FAILED_BM_OR_INVISGOD 159 SPELL_FAILED_EXPERT_RIDING_REQUIREMENT 160 SPELL_FAILED_ARTISAN_RIDING_REQUIREMENT 161 SPELL_FAILED_NOT_IDLE 162 SPELL_FAILED_NOT_INACTIVE 163 SPELL_FAILED_PARTIAL_PLAYTIME 164 SPELL_FAILED_NO_PLAYTIME 165 SPELL_FAILED_NOT_IN_BATTLEGROUND 166 SPELL_FAILED_ONLY_IN_ARENA 167 SPELL_FAILED_TARGET_LOCKED_TO_RAID_INSTANCE 168 SPELL_FAILED_UNKNOWN 253 SPELL_FAILED_PVP_CHECK 254 SPELL_NOT_FOUND 255 SPELL_CAST_OK","title":"Spell Results"},{"location":"api/enums/spell_results/#spell-result","text":"The spell_results enum allows for mapping from a spell result id to its corresponding name. The key is a number id and the value is a string name . It is accessed through wow.enums.spell_results . Due to the significant length of results simplified names have not been provided; the value is a 1-to-1 to the server enum. It is recommended to use spell_results to interpret the result of the cast and force_cast functions of the Player type. For example: print ( wow . enums . classes .122 ) -- SPELL_FAILED_TOO_CLOSE print ( wow . enums . classes . SPELL_FAILED_TOO_CLOSE ) -- 122 local result = bot : cast ( SOME_SPELL_ID ) print ( wow . enums . classes [ result ]) -- SPELL_FAILED_TOO_CLOSE Key Value 0 SPELL_FAILED_AFFECTING_COMBAT 1 SPELL_FAILED_ALREADY_AT_FULL_HEALTH 2 SPELL_FAILED_ALREADY_AT_FULL_MANA 3 SPELL_FAILED_ALREADY_AT_FULL_POWER 4 SPELL_FAILED_ALREADY_BEING_TAMED 5 SPELL_FAILED_ALREADY_HAVE_CHARM 6 SPELL_FAILED_ALREADY_HAVE_SUMMON 7 SPELL_FAILED_ALREADY_OPEN 8 SPELL_FAILED_AURA_BOUNCED 9 SPELL_FAILED_AUTOTRACK_INTERRUPTED 10 SPELL_FAILED_BAD_IMPLICIT_TARGETS 11 SPELL_FAILED_BAD_TARGETS 12 SPELL_FAILED_CANT_BE_CHARMED 13 SPELL_FAILED_CANT_BE_DISENCHANTED 14 SPELL_FAILED_CANT_BE_DISENCHANTED_SKILL 15 SPELL_FAILED_CANT_BE_PROSPECTED 16 SPELL_FAILED_CANT_CAST_ON_TAPPED 17 SPELL_FAILED_CANT_DUEL_WHILE_INVISIBLE 18 SPELL_FAILED_CANT_DUEL_WHILE_STEALTHED 19 SPELL_FAILED_CANT_STEALTH 20 SPELL_FAILED_CASTER_AURASTATE 21 SPELL_FAILED_CASTER_DEAD 22 SPELL_FAILED_CHARMED 23 SPELL_FAILED_CHEST_IN_USE 24 SPELL_FAILED_CONFUSED 25 SPELL_FAILED_DONT_REPORT 26 SPELL_FAILED_EQUIPPED_ITEM 27 SPELL_FAILED_EQUIPPED_ITEM_CLASS 28 SPELL_FAILED_EQUIPPED_ITEM_CLASS_MAINHAND 29 SPELL_FAILED_EQUIPPED_ITEM_CLASS_OFFHAND 30 SPELL_FAILED_ERROR 31 SPELL_FAILED_FIZZLE 32 SPELL_FAILED_FLEEING 33 SPELL_FAILED_FOOD_LOWLEVEL 34 SPELL_FAILED_HIGHLEVEL 35 SPELL_FAILED_HUNGER_SATIATED 36 SPELL_FAILED_IMMUNE 37 SPELL_FAILED_INTERRUPTED 38 SPELL_FAILED_INTERRUPTED_COMBAT 39 SPELL_FAILED_ITEM_ALREADY_ENCHANTED 40 SPELL_FAILED_ITEM_GONE 41 SPELL_FAILED_ITEM_NOT_FOUND 42 SPELL_FAILED_ITEM_NOT_READY 43 SPELL_FAILED_LEVEL_REQUIREMENT 44 SPELL_FAILED_LINE_OF_SIGHT 45 SPELL_FAILED_LOWLEVEL 46 SPELL_FAILED_LOW_CASTLEVEL 47 SPELL_FAILED_MAINHAND_EMPTY 48 SPELL_FAILED_MOVING 49 SPELL_FAILED_NEED_AMMO 50 SPELL_FAILED_NEED_AMMO_POUCH 51 SPELL_FAILED_NEED_EXOTIC_AMMO 52 SPELL_FAILED_NOPATH 53 SPELL_FAILED_NOT_BEHIND 54 SPELL_FAILED_NOT_FISHABLE 55 SPELL_FAILED_NOT_FLYING 56 SPELL_FAILED_NOT_HERE 57 SPELL_FAILED_NOT_INFRONT 58 SPELL_FAILED_NOT_IN_CONTROL 59 SPELL_FAILED_NOT_KNOWN 60 SPELL_FAILED_NOT_MOUNTED 61 SPELL_FAILED_NOT_ON_TAXI 62 SPELL_FAILED_NOT_ON_TRANSPORT 63 SPELL_FAILED_NOT_READY 64 SPELL_FAILED_NOT_SHAPESHIFT 65 SPELL_FAILED_NOT_STANDING 66 SPELL_FAILED_NOT_TRADEABLE 67 SPELL_FAILED_NOT_TRADING 68 SPELL_FAILED_NOT_UNSHEATHED 69 SPELL_FAILED_NOT_WHILE_GHOST 70 SPELL_FAILED_NO_AMMO 71 SPELL_FAILED_NO_CHARGES_REMAIN 72 SPELL_FAILED_NO_CHAMPION 73 SPELL_FAILED_NO_COMBO_POINTS 74 SPELL_FAILED_NO_DUELING 75 SPELL_FAILED_NO_ENDURANCE 76 SPELL_FAILED_NO_FISH 77 SPELL_FAILED_NO_ITEMS_WHILE_SHAPESHIFTED 78 SPELL_FAILED_NO_MOUNTS_ALLOWED 79 SPELL_FAILED_NO_PET 80 SPELL_FAILED_NO_POWER 81 SPELL_FAILED_NOTHING_TO_DISPEL 82 SPELL_FAILED_NOTHING_TO_STEAL 83 SPELL_FAILED_ONLY_ABOVEWATER 84 SPELL_FAILED_ONLY_DAYTIME 85 SPELL_FAILED_ONLY_INDOORS 86 SPELL_FAILED_ONLY_MOUNTED 87 SPELL_FAILED_ONLY_NIGHTTIME 88 SPELL_FAILED_ONLY_OUTDOORS 89 SPELL_FAILED_ONLY_SHAPESHIFT 90 SPELL_FAILED_ONLY_STEALTHED 91 SPELL_FAILED_ONLY_UNDERWATER 92 SPELL_FAILED_OUT_OF_RANGE 93 SPELL_FAILED_PACIFIED 94 SPELL_FAILED_POSSESSED 95 SPELL_FAILED_REAGENTS 96 SPELL_FAILED_REQUIRES_AREA 97 SPELL_FAILED_REQUIRES_SPELL_FOCUS 98 SPELL_FAILED_ROOTED 99 SPELL_FAILED_SILENCED 100 SPELL_FAILED_SPELL_IN_PROGRESS 101 SPELL_FAILED_SPELL_LEARNED 102 SPELL_FAILED_SPELL_UNAVAILABLE 103 SPELL_FAILED_STUNNED 104 SPELL_FAILED_TARGETS_DEAD 105 SPELL_FAILED_TARGET_AFFECTING_COMBAT 106 SPELL_FAILED_TARGET_AURASTATE 107 SPELL_FAILED_TARGET_DUELING 108 SPELL_FAILED_TARGET_ENEMY 109 SPELL_FAILED_TARGET_ENRAGED 110 SPELL_FAILED_TARGET_FRIENDLY 111 SPELL_FAILED_TARGET_IN_COMBAT 112 SPELL_FAILED_TARGET_IS_PLAYER 113 SPELL_FAILED_TARGET_IS_PLAYER_CONTROLLED 114 SPELL_FAILED_TARGET_NOT_DEAD 115 SPELL_FAILED_TARGET_NOT_IN_PARTY 116 SPELL_FAILED_TARGET_NOT_LOOTED 117 SPELL_FAILED_TARGET_NOT_PLAYER 118 SPELL_FAILED_TARGET_NO_POCKETS 119 SPELL_FAILED_TARGET_NO_WEAPONS 120 SPELL_FAILED_TARGET_UNSKINNABLE 121 SPELL_FAILED_THIRST_SATIATED 122 SPELL_FAILED_TOO_CLOSE 123 SPELL_FAILED_TOO_MANY_OF_ITEM 124 SPELL_FAILED_TOTEM_CATEGORY 125 SPELL_FAILED_TOTEMS 126 SPELL_FAILED_TRAINING_POINTS 127 SPELL_FAILED_TRY_AGAIN 128 SPELL_FAILED_UNIT_NOT_BEHIND 129 SPELL_FAILED_UNIT_NOT_INFRONT 130 SPELL_FAILED_WRONG_PET_FOOD 131 SPELL_FAILED_NOT_WHILE_FATIGUED 132 SPELL_FAILED_TARGET_NOT_IN_INSTANCE 133 SPELL_FAILED_NOT_WHILE_TRADING 134 SPELL_FAILED_TARGET_NOT_IN_RAID 135 SPELL_FAILED_DISENCHANT_WHILE_LOOTING 136 SPELL_FAILED_PROSPECT_WHILE_LOOTING 137 SPELL_FAILED_PROSPECT_NEED_MORE 138 SPELL_FAILED_TARGET_FREEFORALL 139 SPELL_FAILED_NO_EDIBLE_CORPSES 140 SPELL_FAILED_ONLY_BATTLEGROUNDS 141 SPELL_FAILED_TARGET_NOT_GHOST 142 SPELL_FAILED_TOO_MANY_SKILLS 143 SPELL_FAILED_TRANSFORM_UNUSABLE 144 SPELL_FAILED_WRONG_WEATHER 145 SPELL_FAILED_DAMAGE_IMMUNE 146 SPELL_FAILED_PREVENTED_BY_MECHANIC 147 SPELL_FAILED_PLAY_TIME 148 SPELL_FAILED_REPUTATION 149 SPELL_FAILED_MIN_SKILL 150 SPELL_FAILED_NOT_IN_ARENA 151 SPELL_FAILED_NOT_ON_SHAPESHIFT 152 SPELL_FAILED_NOT_ON_STEALTHED 153 SPELL_FAILED_NOT_ON_DAMAGE_IMMUNE 154 SPELL_FAILED_NOT_ON_MOUNTED 155 SPELL_FAILED_TOO_SHALLOW 156 SPELL_FAILED_TARGET_NOT_IN_SANCTUARY 157 SPELL_FAILED_TARGET_IS_TRIVIAL 158 SPELL_FAILED_BM_OR_INVISGOD 159 SPELL_FAILED_EXPERT_RIDING_REQUIREMENT 160 SPELL_FAILED_ARTISAN_RIDING_REQUIREMENT 161 SPELL_FAILED_NOT_IDLE 162 SPELL_FAILED_NOT_INACTIVE 163 SPELL_FAILED_PARTIAL_PLAYTIME 164 SPELL_FAILED_NO_PLAYTIME 165 SPELL_FAILED_NOT_IN_BATTLEGROUND 166 SPELL_FAILED_ONLY_IN_ARENA 167 SPELL_FAILED_TARGET_LOCKED_TO_RAID_INSTANCE 168 SPELL_FAILED_UNKNOWN 253 SPELL_FAILED_PVP_CHECK 254 SPELL_NOT_FOUND 255 SPELL_CAST_OK","title":"Spell Result"},{"location":"api/globals/","text":"Global Globals are members and functions that are available in any context, accessible directly through their identifier. They often serve as the entrypoint when drilling into the game state. Members These members are available anywhere. For example: print ( str ( pi )) -- 3.14159265358979323846 Name Description Return Type Tested? pi pi to the 20th decimal place number Yes wow state data for the wow server table Yes store store data for the client table Yes Functions These are functions available anywhere. All members are read-only. Usage example: print ( str ( wow . time ())) -- time in ticks Function Description Parameters Return Type Tested? print will generate a system message on the client that owns the environment (overrides default behavior) string message none Yes log will send a log message to the log stream output (not necessarily the system) string message none Yes str casts a lua object to a string (alias of tostring ) object obj string Yes num casts a lua object to a number (alias of tonumber ) object obj number Yes each returns a stateful iterator that can be used when the index is not desired array arr iterator Yes Each each is offered to cleanup a mild but common code smell in lua when iteration through an array of elements is desired but the index of the current element is not desired. In vanilla lua, the following code would be used: for _ , item in ipairs ( items ) do print ( item ) end With each , the same code would read: for item in each ( items ) do print ( item ) end This simplifies the code and improves readability. ipairs remains still available when the index is desired.","title":"Global"},{"location":"api/globals/#global","text":"Globals are members and functions that are available in any context, accessible directly through their identifier. They often serve as the entrypoint when drilling into the game state.","title":"Global"},{"location":"api/globals/#members","text":"These members are available anywhere. For example: print ( str ( pi )) -- 3.14159265358979323846 Name Description Return Type Tested? pi pi to the 20th decimal place number Yes wow state data for the wow server table Yes store store data for the client table Yes","title":"Members"},{"location":"api/globals/#functions","text":"These are functions available anywhere. All members are read-only. Usage example: print ( str ( wow . time ())) -- time in ticks Function Description Parameters Return Type Tested? print will generate a system message on the client that owns the environment (overrides default behavior) string message none Yes log will send a log message to the log stream output (not necessarily the system) string message none Yes str casts a lua object to a string (alias of tostring ) object obj string Yes num casts a lua object to a number (alias of tonumber ) object obj number Yes each returns a stateful iterator that can be used when the index is not desired array arr iterator Yes","title":"Functions"},{"location":"api/globals/#each","text":"each is offered to cleanup a mild but common code smell in lua when iteration through an array of elements is desired but the index of the current element is not desired. In vanilla lua, the following code would be used: for _ , item in ipairs ( items ) do print ( item ) end With each , the same code would read: for item in each ( items ) do print ( item ) end This simplifies the code and improves readability. ipairs remains still available when the index is desired.","title":"Each"},{"location":"api/globals/store/","text":"Store Functions These are functions available anywhere on the store table, accessible anywhere. Usage example: json = require ( \"json\" ) local json_str = wow . store . get () -- { \"some_key\": \"some_value\" } data = json . decode ( json_str ) print ( data . some_key ) The store allow for unstructured data to be saved between lua script sessions, e.g. getting and setting json strings. Function Description Parameters Return Type Tested? get get data from persistent store none string Yes set set data from persistent store string value none Yes clear clear data from persistent store none none Yes","title":"store"},{"location":"api/globals/store/#store","text":"","title":"Store"},{"location":"api/globals/store/#functions","text":"These are functions available anywhere on the store table, accessible anywhere. Usage example: json = require ( \"json\" ) local json_str = wow . store . get () -- { \"some_key\": \"some_value\" } data = json . decode ( json_str ) print ( data . some_key ) The store allow for unstructured data to be saved between lua script sessions, e.g. getting and setting json strings. Function Description Parameters Return Type Tested? get get data from persistent store none string Yes set set data from persistent store string value none Yes clear clear data from persistent store none none Yes","title":"Functions"},{"location":"api/globals/wow/","text":"wow Most state data is accessible through the readonly wow table. Members All members are read-only. Usage example: print ( wow . master . name ) Name Description Return Type Tested? command_message the last message sent as a command (from .bot ai write ... ) string No command_position the last position sent as a command (from command spell) Position No bots All the bots that are managed by the master array<Bot> No raid_icons All raid icon targets (nullable) ex. raid_icons.skull table<Unit> No master get the master Player Yes enums provides access to the enums table table Yes group all group members array<Player> Yes Functions All functions are read-only. Usage example: print ( str ( wow . time ())) -- time in ticks Function Description Parameters Return Type Tested? spell_exists get whether or not a spell is available number spell_id bool No time Get the current time in ticks since the epoch (ms) number Yes spell_is_positive get whether or not a spell is helpful or harmful number spell_id bool No","title":"wow"},{"location":"api/globals/wow/#wow","text":"Most state data is accessible through the readonly wow table.","title":"wow"},{"location":"api/globals/wow/#members","text":"All members are read-only. Usage example: print ( wow . master . name ) Name Description Return Type Tested? command_message the last message sent as a command (from .bot ai write ... ) string No command_position the last position sent as a command (from command spell) Position No bots All the bots that are managed by the master array<Bot> No raid_icons All raid icon targets (nullable) ex. raid_icons.skull table<Unit> No master get the master Player Yes enums provides access to the enums table table Yes group all group members array<Player> Yes","title":"Members"},{"location":"api/globals/wow/#functions","text":"All functions are read-only. Usage example: print ( str ( wow . time ())) -- time in ticks Function Description Parameters Return Type Tested? spell_exists get whether or not a spell is available number spell_id bool No time Get the current time in ticks since the epoch (ms) number Yes spell_is_positive get whether or not a spell is helpful or harmful number spell_id bool No","title":"Functions"},{"location":"api/types/aura/","text":"Aura This type represents an aura, buff, or debuff. Members The following are members of Aura . For example: print ( \"duration: \" .. some_aura . duration ) Name Description Return Type Tested? id the id of the aura number No type the dispel type of the aura (e.g. magic) number No target the target of the aura Unit No caster the caster of the aura Unit No stacks aura's stack count number No duration aura's remaining time, -1 if not found number No max_duration aura's maximum duration number No charges aura's charge count number No","title":"Aura"},{"location":"api/types/aura/#aura","text":"This type represents an aura, buff, or debuff.","title":"Aura"},{"location":"api/types/aura/#members","text":"The following are members of Aura . For example: print ( \"duration: \" .. some_aura . duration ) Name Description Return Type Tested? id the id of the aura number No type the dispel type of the aura (e.g. magic) number No target the target of the aura Unit No caster the caster of the aura Unit No stacks aura's stack count number No duration aura's remaining time, -1 if not found number No max_duration aura's maximum duration number No charges aura's charge count number No","title":"Members"},{"location":"api/types/creature/","text":"Creature This type represents a creature. It inherits all API functionality from Object , WorldObject , and Unit . All members and functions are read-only. Members The following are members of Creature . All members are read-only. For example: print ( \"Creature is elite: \" .. some_creature . is_elite ) Name Description Return Type Tested? is_elite whether or not the creature is elite bool No is_world_boss whether or not the creature is a world boss bool No can_aggro whether or not the creature can be aggro'd bool No is_regen_hp whether or not the creature is regenerating health (no sure what this means exactly) bool No is_regen_power whether or not the creature is regenerating hp (not sure what this means exactly) bool No can_walk whether or not the creature can walk bool No can_swim whether or not the creature can swim bool No can_fly whether or not the creature can fly bool No","title":"Creature"},{"location":"api/types/creature/#creature","text":"This type represents a creature. It inherits all API functionality from Object , WorldObject , and Unit . All members and functions are read-only.","title":"Creature"},{"location":"api/types/creature/#members","text":"The following are members of Creature . All members are read-only. For example: print ( \"Creature is elite: \" .. some_creature . is_elite ) Name Description Return Type Tested? is_elite whether or not the creature is elite bool No is_world_boss whether or not the creature is a world boss bool No can_aggro whether or not the creature can be aggro'd bool No is_regen_hp whether or not the creature is regenerating health (no sure what this means exactly) bool No is_regen_power whether or not the creature is regenerating hp (not sure what this means exactly) bool No can_walk whether or not the creature can walk bool No can_swim whether or not the creature can swim bool No can_fly whether or not the creature can fly bool No","title":"Members"},{"location":"api/types/game_object/","text":"GameObject This type represents a game object. It inherits all API functionality from Object and WorldObject . All members and functions are read-only. Members The following are members of GameObject . All members are read-only. For example: print ( \"Owner: \" .. some_game_object . owner . name ) Name Description Return Type Tested? in_use whether or not the object is in use bool No owner the owner of the game object Unit No level the level of the game object number No","title":"Game Object"},{"location":"api/types/game_object/#gameobject","text":"This type represents a game object. It inherits all API functionality from Object and WorldObject . All members and functions are read-only.","title":"GameObject"},{"location":"api/types/game_object/#members","text":"The following are members of GameObject . All members are read-only. For example: print ( \"Owner: \" .. some_game_object . owner . name ) Name Description Return Type Tested? in_use whether or not the object is in use bool No owner the owner of the game object Unit No level the level of the game object number No","title":"Members"},{"location":"api/types/item/","text":"Item This type represents an item. It inherits all functionality from Object . All members are read-only. Members The following are members of Item . For example: print ( \"item stack count: \" .. some_item . total_count ) Name Description Return Type Tested? id the item's generic Id (not the id of the instance of the item) number No name the name of the item string No total_count how many of this type of item are in the owner's inventory number No max_stack_count the item's highest stack count before it makes another stack number No charges how many charges remain on the item number No is_potion whether or not the item is a potion bool No spell_id the item's associated spell id (if it can be 'cast') number No is_ready whether or not the associated spell is ready (returns false if the item does not have a spell) bool No Functions The following are callable functions on any Item . some_item : use () Function Description Parameters Return Type Tested? use use an item on a slot , target (or self), or game object- Will not use if currently casting number slot or Item target GameObject target none Yes force_use use an item on a slot , target (or self), or game object- Will interrupt cast before using number slot or Item target GameObject target none Yes destroy destroy the item- will destroy the stack none none Yes","title":"Item"},{"location":"api/types/item/#item","text":"This type represents an item. It inherits all functionality from Object . All members are read-only.","title":"Item"},{"location":"api/types/item/#members","text":"The following are members of Item . For example: print ( \"item stack count: \" .. some_item . total_count ) Name Description Return Type Tested? id the item's generic Id (not the id of the instance of the item) number No name the name of the item string No total_count how many of this type of item are in the owner's inventory number No max_stack_count the item's highest stack count before it makes another stack number No charges how many charges remain on the item number No is_potion whether or not the item is a potion bool No spell_id the item's associated spell id (if it can be 'cast') number No is_ready whether or not the associated spell is ready (returns false if the item does not have a spell) bool No","title":"Members"},{"location":"api/types/item/#functions","text":"The following are callable functions on any Item . some_item : use () Function Description Parameters Return Type Tested? use use an item on a slot , target (or self), or game object- Will not use if currently casting number slot or Item target GameObject target none Yes force_use use an item on a slot , target (or self), or game object- Will interrupt cast before using number slot or Item target GameObject target none Yes destroy destroy the item- will destroy the stack none none Yes","title":"Functions"},{"location":"api/types/movement_policy/","text":"MovementPolicy This type represents a movement policy. A movement policy is either a chase, follow or move policy that builds a series of movement actions that are iterated by the main thread. A chase, follow, or move policy is initiated through Player.chase , Player.follow , or Player.move respectively. All movement policies generate a movement plan for a bot over time. playerbot-lua enables the user to set a new policy for a given bot in the same way that regular creatures and pets configure movement. Once the policy is set, the main thread will operate on the current policy by handling moving the unit through each path node generated by the policy to reach its destination. Path nodes are generated in such a way so as to allow pathfinding to the destination. Since policies work over time and are not meant to be rapidly changed, policies for each bot are throttled to only allow policy updates every 500ms. This frequency was chosen as it strikes a good balance between responsiveness and performance. Lower times often result in movement animation glitches on the client side, and higher times make the bots too unresponsive. Throttling is tracked per bot across all policy types. Policy updates are also not applied if the new policy is the same as the old policy in order to avoid the overhead of initializing a new policy. Certain parameters are also checked to ensure that parameter changes are not trivial. For example, given a move policy, if the distance between the old destination and the new destination are less than .5 units, it will not initialize the policy. All members are read-only. Members The following are members of MovementPolicy . For example: print ( \"current follow target: \" .. some_bot . movement_policy . follow_target . name ) Name Description Return Type Tested? follow_target the target the player is following Unit No follow_distance the distance at which the player is following the follow target number No follow_angle the angle at which the player is following the follow target number No chase_target the target the player is chasing Unit No chase_distance the distance at which the player is chasing the chase target number No chase_angle the angle at which the player is chasing the chase target number No move_destination the destination the player is currently heading towards Position No","title":"Movement Policy"},{"location":"api/types/movement_policy/#movementpolicy","text":"This type represents a movement policy. A movement policy is either a chase, follow or move policy that builds a series of movement actions that are iterated by the main thread. A chase, follow, or move policy is initiated through Player.chase , Player.follow , or Player.move respectively. All movement policies generate a movement plan for a bot over time. playerbot-lua enables the user to set a new policy for a given bot in the same way that regular creatures and pets configure movement. Once the policy is set, the main thread will operate on the current policy by handling moving the unit through each path node generated by the policy to reach its destination. Path nodes are generated in such a way so as to allow pathfinding to the destination. Since policies work over time and are not meant to be rapidly changed, policies for each bot are throttled to only allow policy updates every 500ms. This frequency was chosen as it strikes a good balance between responsiveness and performance. Lower times often result in movement animation glitches on the client side, and higher times make the bots too unresponsive. Throttling is tracked per bot across all policy types. Policy updates are also not applied if the new policy is the same as the old policy in order to avoid the overhead of initializing a new policy. Certain parameters are also checked to ensure that parameter changes are not trivial. For example, given a move policy, if the distance between the old destination and the new destination are less than .5 units, it will not initialize the policy. All members are read-only.","title":"MovementPolicy"},{"location":"api/types/movement_policy/#members","text":"The following are members of MovementPolicy . For example: print ( \"current follow target: \" .. some_bot . movement_policy . follow_target . name ) Name Description Return Type Tested? follow_target the target the player is following Unit No follow_distance the distance at which the player is following the follow target number No follow_angle the angle at which the player is following the follow target number No chase_target the target the player is chasing Unit No chase_distance the distance at which the player is chasing the chase target number No chase_angle the angle at which the player is chasing the chase target number No move_destination the destination the player is currently heading towards Position No","title":"Members"},{"location":"api/types/object/","text":"Object This type represents a generic object. All members and functions are read-only. Members The following are members of Object . All members are read-only. For example: print ( \"Object is player: \" .. some_object . is_player ) Name Description Return Type Tested? id the object's id number Yes is_player whether or not the object is a Player bool Yes is_creature whether or not the object is a Creature bool Yes is_game_object whether or not the object is a GameObject bool No is_unit whether or not the object is a Unit bool Yes Functions The following are callable functions on any Object . All functions are read-only. print ( \"Last Message: \" .. some_object : as_player (). last_message ) Function Description Parameters Return Type Tested? as_player casts the object to a Player none Player No as_creature casts the object to a Creature none Creature No as_game_object casts the object to a GameObject none GameObject No as_unit casts the object to a Unit none Unit No Note- these functions are required to be able to access the corresponding members and functions for that object type. They should only need to be called if a member or function returns this direct type- most often a derived type is returned and these casts are not necessary.","title":"Object"},{"location":"api/types/object/#object","text":"This type represents a generic object. All members and functions are read-only.","title":"Object"},{"location":"api/types/object/#members","text":"The following are members of Object . All members are read-only. For example: print ( \"Object is player: \" .. some_object . is_player ) Name Description Return Type Tested? id the object's id number Yes is_player whether or not the object is a Player bool Yes is_creature whether or not the object is a Creature bool Yes is_game_object whether or not the object is a GameObject bool No is_unit whether or not the object is a Unit bool Yes","title":"Members"},{"location":"api/types/object/#functions","text":"The following are callable functions on any Object . All functions are read-only. print ( \"Last Message: \" .. some_object : as_player (). last_message ) Function Description Parameters Return Type Tested? as_player casts the object to a Player none Player No as_creature casts the object to a Creature none Creature No as_game_object casts the object to a GameObject none GameObject No as_unit casts the object to a Unit none Unit No Note- these functions are required to be able to access the corresponding members and functions for that object type. They should only need to be called if a member or function returns this direct type- most often a derived type is returned and these casts are not necessary.","title":"Functions"},{"location":"api/types/pet/","text":"Pet This type represents a pet. It inherits all API functionality from Creature , Unit , WorldObject , and Object . Members The following are members of Pet . For example: print ( \"Pet owner: \" .. pet_owner . name ) Name Description Return Type Tested? pet_owner the pet's owner (better the owner member) Player No happiness the pet's happiness number 1: unhappy, 2: content, 3: happy No is_feeding whether or not the pet is feeding bool No react_state get or set the pet's reaction state number 0: passive, 1: defensive, 2: aggressive No Functions The following are callable functions on any Pet . some_pet : summon () Function Description Parameters Return Type Tested? set_autocast set autocast for the given ability number spell_id , bool enabled none No summon summon the pet none none No dismiss dismiss the pet none none No attempt_feed find food in the owner's inventory and attempt to feed it to the pet none bool (success) No","title":"Pet"},{"location":"api/types/pet/#pet","text":"This type represents a pet. It inherits all API functionality from Creature , Unit , WorldObject , and Object .","title":"Pet"},{"location":"api/types/pet/#members","text":"The following are members of Pet . For example: print ( \"Pet owner: \" .. pet_owner . name ) Name Description Return Type Tested? pet_owner the pet's owner (better the owner member) Player No happiness the pet's happiness number 1: unhappy, 2: content, 3: happy No is_feeding whether or not the pet is feeding bool No react_state get or set the pet's reaction state number 0: passive, 1: defensive, 2: aggressive No","title":"Members"},{"location":"api/types/pet/#functions","text":"The following are callable functions on any Pet . some_pet : summon () Function Description Parameters Return Type Tested? set_autocast set autocast for the given ability number spell_id , bool enabled none No summon summon the pet none none No dismiss dismiss the pet none none No attempt_feed find food in the owner's inventory and attempt to feed it to the pet none bool (success) No","title":"Functions"},{"location":"api/types/player/","text":"Player This type represents the player. It inherits all API functionality from Object , WorldObject , and Unit . Members The following are members of Player . All members are read-only. For example: print ( \"Last message: \" .. some_bot . last_message ) Name Description Return Type Tested? is_bot whether or not the player is a bot bool Yes last_message the last whisper or party/raid message (only player messages) string Yes class the player's class id- classes number No inventory all the items in the player's backpack(s) array<Item> No trinket_1 the player's first trinket Item Yes trinket_2 the player's second trinket Item Yes destination the player's destination (if given a chase command) Position No has_reached_destination whether or not the player has reached its chase destination bool No spec The player's deepest tree specialization- see specs number No party the player's party number (i.e. the number in the raid panel) number No movement_policy the player's [movement policy] (api/types/movement_policy.md) if any MovementPolicy No Functions The following are callable on a Player . Most of these functions perform an action. It is recommended to only choose one action to perform per tick. Responsible use is left to the developer. Example usage: some_bot : whisper ( wow . master , \"I'm alive!\" ) Function Description Parameters Return Type Tested? stand have the bot stand up none none No sit have the bot sit down none none No dance have the bot dance none none No kneel have the bot kneel none none No interrupt stop casting/channeling none none Yes move move to a position - sets a move movement policy (x, y) or Unit none No chase chase a unit- - sets a chase movement policy Unit target , number distance , number angle none No follow follow a unit - sets a follow movement policy Unit target , number distance , number angle none Yes teleport_to teleport to a unit Unit target none Yes stop stops the player from moving none none No reset_movement stops the player from moving and clears all movement tasks (i.e. follow, chase) none none No add_item execute the additem command as the given bot (will not work in combat) string text bool success No revive execute the revive chat command as the given bot (will not work in combat) none bool success No whisper whisper a player Player target , string text none Yes tell_party send a message to party chat string text none Yes tell_raid send a message to raid chat string text none Yes say send a message to local area string text none Yes yell yell a message to local area string text none Yes set_target set the bot's target Unit target none Yes clear_target clear the bot's target none none Yes clear_stealth clears stealth state none none Yes face faces the given target or orientation Unit target or number orientation none Yes has_power_to_cast checks to see if bot has enough power (mana, energy, etc.) to cast a given spell number spell_id bool Yes can_cast returns of if the bot can cast a spell (checks cooldown, silenced, etc.) number spell_id bool Yes get_cast_time Get the cast time of the provided spell id number spell_id number (ms) No get_item_in_equip_slot gets the item in the passed equip_slot number slot Item (nullable) No get_item locates the first item matching the name (case sensitive) or id in inventory string name or number Item (nullable) No cast attempts to cast a spell on target or self- result is spell_result Unit target (optional), number spell_id number Yes simple_cast same as cast, but only returns whether or not cast succeeded Unit target (optional), number spell_id bool Yes force_cast same as cast , will interrupt current cast before casting Unit target (optional), number spell_id number Yes simple_force_cast same as force cast, but only returns whether or not cast succeeded Unit target (optional), number spell_id bool Yes in_same_party_as will return whether or not the player is in the same party as the given player Player target bool Yes get_nearby_group_members get an array of all group members within given radius of world object (excludes original player) number radius array<Player> No get_nearby_party_members get an array of all party members within given radius of world object (excludes original player) number radius array<Player> No cancel_aura remove a beneficial aura from the player Aura aura or number spell_id none No","title":"Player"},{"location":"api/types/player/#player","text":"This type represents the player. It inherits all API functionality from Object , WorldObject , and Unit .","title":"Player"},{"location":"api/types/player/#members","text":"The following are members of Player . All members are read-only. For example: print ( \"Last message: \" .. some_bot . last_message ) Name Description Return Type Tested? is_bot whether or not the player is a bot bool Yes last_message the last whisper or party/raid message (only player messages) string Yes class the player's class id- classes number No inventory all the items in the player's backpack(s) array<Item> No trinket_1 the player's first trinket Item Yes trinket_2 the player's second trinket Item Yes destination the player's destination (if given a chase command) Position No has_reached_destination whether or not the player has reached its chase destination bool No spec The player's deepest tree specialization- see specs number No party the player's party number (i.e. the number in the raid panel) number No movement_policy the player's [movement policy] (api/types/movement_policy.md) if any MovementPolicy No","title":"Members"},{"location":"api/types/player/#functions","text":"The following are callable on a Player . Most of these functions perform an action. It is recommended to only choose one action to perform per tick. Responsible use is left to the developer. Example usage: some_bot : whisper ( wow . master , \"I'm alive!\" ) Function Description Parameters Return Type Tested? stand have the bot stand up none none No sit have the bot sit down none none No dance have the bot dance none none No kneel have the bot kneel none none No interrupt stop casting/channeling none none Yes move move to a position - sets a move movement policy (x, y) or Unit none No chase chase a unit- - sets a chase movement policy Unit target , number distance , number angle none No follow follow a unit - sets a follow movement policy Unit target , number distance , number angle none Yes teleport_to teleport to a unit Unit target none Yes stop stops the player from moving none none No reset_movement stops the player from moving and clears all movement tasks (i.e. follow, chase) none none No add_item execute the additem command as the given bot (will not work in combat) string text bool success No revive execute the revive chat command as the given bot (will not work in combat) none bool success No whisper whisper a player Player target , string text none Yes tell_party send a message to party chat string text none Yes tell_raid send a message to raid chat string text none Yes say send a message to local area string text none Yes yell yell a message to local area string text none Yes set_target set the bot's target Unit target none Yes clear_target clear the bot's target none none Yes clear_stealth clears stealth state none none Yes face faces the given target or orientation Unit target or number orientation none Yes has_power_to_cast checks to see if bot has enough power (mana, energy, etc.) to cast a given spell number spell_id bool Yes can_cast returns of if the bot can cast a spell (checks cooldown, silenced, etc.) number spell_id bool Yes get_cast_time Get the cast time of the provided spell id number spell_id number (ms) No get_item_in_equip_slot gets the item in the passed equip_slot number slot Item (nullable) No get_item locates the first item matching the name (case sensitive) or id in inventory string name or number Item (nullable) No cast attempts to cast a spell on target or self- result is spell_result Unit target (optional), number spell_id number Yes simple_cast same as cast, but only returns whether or not cast succeeded Unit target (optional), number spell_id bool Yes force_cast same as cast , will interrupt current cast before casting Unit target (optional), number spell_id number Yes simple_force_cast same as force cast, but only returns whether or not cast succeeded Unit target (optional), number spell_id bool Yes in_same_party_as will return whether or not the player is in the same party as the given player Player target bool Yes get_nearby_group_members get an array of all group members within given radius of world object (excludes original player) number radius array<Player> No get_nearby_party_members get an array of all party members within given radius of world object (excludes original player) number radius array<Player> No cancel_aura remove a beneficial aura from the player Aura aura or number spell_id none No","title":"Functions"},{"location":"api/types/position/","text":"Position This type represents a position. All members and functions are read-only. Members The following are members of Position . All members are read-only. For example: print ( \"Pos X: \" .. pos . x ) Name Description Return Type Tested? x get the x value of the position number Yes y get the y value of the position number Yes z get the z value of the position number Yes o get the orientation value of the position number Yes is_empty whether or not the position is empty (treat as null) number no Functions The following are callable functions on any Position . All functions are read-only. print ( \"Distance: \" .. pos_1 : get_distance_between ( pos_2 )) Function Description Parameters Return Type Tested? get_distance_to get the distance between two positions (returns squard distance) Position other number Yes get_angle get the angle to a given position Position other or number x , number y number Yes","title":"Position"},{"location":"api/types/position/#position","text":"This type represents a position. All members and functions are read-only.","title":"Position"},{"location":"api/types/position/#members","text":"The following are members of Position . All members are read-only. For example: print ( \"Pos X: \" .. pos . x ) Name Description Return Type Tested? x get the x value of the position number Yes y get the y value of the position number Yes z get the z value of the position number Yes o get the orientation value of the position number Yes is_empty whether or not the position is empty (treat as null) number no","title":"Members"},{"location":"api/types/position/#functions","text":"The following are callable functions on any Position . All functions are read-only. print ( \"Distance: \" .. pos_1 : get_distance_between ( pos_2 )) Function Description Parameters Return Type Tested? get_distance_to get the distance between two positions (returns squard distance) Position other number Yes get_angle get the angle to a given position Position other or number x , number y number Yes","title":"Functions"},{"location":"api/types/unit/","text":"Unit This type represents a unit, which can be a player, creature, npc, or pet. It inherits all API functionality from Object and WorldObject . All members and functions are read-only. Members The following are members of Unit . All members are read-only. For example: print ( \"Raid Icon: \" .. some_unit . in_combat ) Name Description Return Type Tested? bounding_radius the bounding radius of the unit i.e. ' thiccness ' number Yes pet the unit's pet Pet Yes in_combat whether or not the unit is in combat bool Yes raid_icon the units raid icon number 0-7 (255 for no icon) Yes attackers all units with threat on unit list<Unit> No target the unit's target Unit Yes is_alive whether or not the unit is alive bool Yes crowd_controlled whether or not the unit is CC'd (not used by original playerbot) bool No health current hit points number Yes max_health max hit points number Yes power current power (mana, energy, etc.) number Yes max_power max power (mana, energy, etc.) number Yes current_cast the spell the unit is casting (0 if not found) number No current_cast_time the remaining time on the currently casting spell (ms) number No current_auto_attack the auto attack spell the unit is casting (0 if not found) number No current_channel the channel spell the unit is casting (0 if not found) number No type the unit's type (see creature_types ) number No Functions The following are functions that can be called on a Unit . All functions are read-only. Example usage: print ( \"Bot threat: \" .. some_unit : get_threat ( some_bot )) Function Description Parameters Return Type Tested? is_attacked_by whether or not the given unit is attacking the unit Unit target bool No get_threat get the threat the given target has on the unit Unit target number No in_melee_range get whether or not the given target is reachable with melee Unit target bool Yes is_enemy whether or not the unit can attack the given unit or group if target not provided Unit target (optional) bool Yes is_friendly whether or not the unit can assist (not /assist) the given unit Unit target bool Yes get_aura get the first instance of an aura affecting the unit for the given id number aura_id , Unit caster (optional) Aura No get_buffs get all beneficial auras on the unit none array<Aura> No get_debuffs get all harmful auras on the unit- optional filter by dispel type number dispel_type (optional) array<Aura> No","title":"Unit"},{"location":"api/types/unit/#unit","text":"This type represents a unit, which can be a player, creature, npc, or pet. It inherits all API functionality from Object and WorldObject . All members and functions are read-only.","title":"Unit"},{"location":"api/types/unit/#members","text":"The following are members of Unit . All members are read-only. For example: print ( \"Raid Icon: \" .. some_unit . in_combat ) Name Description Return Type Tested? bounding_radius the bounding radius of the unit i.e. ' thiccness ' number Yes pet the unit's pet Pet Yes in_combat whether or not the unit is in combat bool Yes raid_icon the units raid icon number 0-7 (255 for no icon) Yes attackers all units with threat on unit list<Unit> No target the unit's target Unit Yes is_alive whether or not the unit is alive bool Yes crowd_controlled whether or not the unit is CC'd (not used by original playerbot) bool No health current hit points number Yes max_health max hit points number Yes power current power (mana, energy, etc.) number Yes max_power max power (mana, energy, etc.) number Yes current_cast the spell the unit is casting (0 if not found) number No current_cast_time the remaining time on the currently casting spell (ms) number No current_auto_attack the auto attack spell the unit is casting (0 if not found) number No current_channel the channel spell the unit is casting (0 if not found) number No type the unit's type (see creature_types ) number No","title":"Members"},{"location":"api/types/unit/#functions","text":"The following are functions that can be called on a Unit . All functions are read-only. Example usage: print ( \"Bot threat: \" .. some_unit : get_threat ( some_bot )) Function Description Parameters Return Type Tested? is_attacked_by whether or not the given unit is attacking the unit Unit target bool No get_threat get the threat the given target has on the unit Unit target number No in_melee_range get whether or not the given target is reachable with melee Unit target bool Yes is_enemy whether or not the unit can attack the given unit or group if target not provided Unit target (optional) bool Yes is_friendly whether or not the unit can assist (not /assist) the given unit Unit target bool Yes get_aura get the first instance of an aura affecting the unit for the given id number aura_id , Unit caster (optional) Aura No get_buffs get all beneficial auras on the unit none array<Aura> No get_debuffs get all harmful auras on the unit- optional filter by dispel type number dispel_type (optional) array<Aura> No","title":"Functions"},{"location":"api/types/world_object/","text":"WorldObject This type represents a generic object. It inherits all API functionality from Object . All members and functions are read-only. Members The following are members of WorldObject . All members are read-only. For example: print ( \"Enemy orientation: \" .. enemy . orientation ) Name Description Return Type Tested? orientation the object's orientation number Yes name the object's name string Yes zone_id the object's Zone Id number No area_id the object's Area Id number No position the object's position Position Yes Functions The following are callable functions on any WorldObject . All functions are read-only. print ( \"Bot A angle to bot b: \" .. bot_a : get_angle ( bot_b )) Function Description Parameters Return Type Tested? get_nearby_game_objects get an array of all game objects within given radius of world object number radius array<GameObject> No get_nearby_creatures get an array of all units within given radius of world object number radius array<Unit> No get_angle get the angle to a given object- angle in range 0..2*pi WorldObject world_obj or Position pos or ( number x , number y ) number No get_close_point get a point close to the object number bounding_radius , number distance , number angle Posiiton No has_in_arc whether or not the given target is in the object's arc Unit target bool No is_within_los whether or not the given target is in the object's line of sight Unit target bool No is_in_range whether or not the given target is in range of the given spell Unit target , number spell_id bool No gcd global cooldown remaining for the given spell, 0 if ready number spell_id number (remaining time) No distance_to get the distance between two objects WorldObject world_object number No","title":"World Object"},{"location":"api/types/world_object/#worldobject","text":"This type represents a generic object. It inherits all API functionality from Object . All members and functions are read-only.","title":"WorldObject"},{"location":"api/types/world_object/#members","text":"The following are members of WorldObject . All members are read-only. For example: print ( \"Enemy orientation: \" .. enemy . orientation ) Name Description Return Type Tested? orientation the object's orientation number Yes name the object's name string Yes zone_id the object's Zone Id number No area_id the object's Area Id number No position the object's position Position Yes","title":"Members"},{"location":"api/types/world_object/#functions","text":"The following are callable functions on any WorldObject . All functions are read-only. print ( \"Bot A angle to bot b: \" .. bot_a : get_angle ( bot_b )) Function Description Parameters Return Type Tested? get_nearby_game_objects get an array of all game objects within given radius of world object number radius array<GameObject> No get_nearby_creatures get an array of all units within given radius of world object number radius array<Unit> No get_angle get the angle to a given object- angle in range 0..2*pi WorldObject world_obj or Position pos or ( number x , number y ) number No get_close_point get a point close to the object number bounding_radius , number distance , number angle Posiiton No has_in_arc whether or not the given target is in the object's arc Unit target bool No is_within_los whether or not the given target is in the object's line of sight Unit target bool No is_in_range whether or not the given target is in range of the given spell Unit target , number spell_id bool No gcd global cooldown remaining for the given spell, 0 if ready number spell_id number (remaining time) No distance_to get the distance between two objects WorldObject world_object number No","title":"Functions"}]}